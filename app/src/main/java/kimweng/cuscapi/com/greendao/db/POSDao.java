package kimweng.cuscapi.com.greendao.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import kimweng.cuscapi.com.greendao.POS;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POS".
*/
public class POSDao extends AbstractDao<POS, Void> {

    public static final String TABLENAME = "POS";

    /**
     * Properties of entity POS.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property StoreId = new Property(0, long.class, "storeId", false, "STORE_ID");
        public final static Property PosIp = new Property(1, String.class, "posIp", false, "POS_IP");
        public final static Property PosType = new Property(2, String.class, "posType", false, "POS_TYPE");
    }

    private DaoSession daoSession;

    private Query<POS> shop_PosListQuery;

    public POSDao(DaoConfig config) {
        super(config);
    }
    
    public POSDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POS\" (" + //
                "\"STORE_ID\" INTEGER NOT NULL ," + // 0: storeId
                "\"POS_IP\" TEXT UNIQUE ," + // 1: posIp
                "\"POS_TYPE\" TEXT NOT NULL );"); // 2: posType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, POS entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getStoreId());
 
        String posIp = entity.getPosIp();
        if (posIp != null) {
            stmt.bindString(2, posIp);
        }
        stmt.bindString(3, entity.getPosType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, POS entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getStoreId());
 
        String posIp = entity.getPosIp();
        if (posIp != null) {
            stmt.bindString(2, posIp);
        }
        stmt.bindString(3, entity.getPosType());
    }

    @Override
    protected final void attachEntity(POS entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public POS readEntity(Cursor cursor, int offset) {
        POS entity = new POS( //
            cursor.getLong(offset + 0), // storeId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // posIp
            cursor.getString(offset + 2) // posType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, POS entity, int offset) {
        entity.setStoreId(cursor.getLong(offset + 0));
        entity.setPosIp(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPosType(cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(POS entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(POS entity) {
        return null;
    }

    @Override
    public boolean hasKey(POS entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "posList" to-many relationship of Shop. */
    public List<POS> _queryShop_PosList(long storeId) {
        synchronized (this) {
            if (shop_PosListQuery == null) {
                QueryBuilder<POS> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.StoreId.eq(null));
                shop_PosListQuery = queryBuilder.build();
            }
        }
        Query<POS> query = shop_PosListQuery.forCurrentThread();
        query.setParameter(0, storeId);
        return query.list();
    }

}
