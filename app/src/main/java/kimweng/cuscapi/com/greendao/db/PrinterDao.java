package kimweng.cuscapi.com.greendao.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import kimweng.cuscapi.com.greendao.Printer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRINTER".
*/
public class PrinterDao extends AbstractDao<Printer, Void> {

    public static final String TABLENAME = "PRINTER";

    /**
     * Properties of entity Printer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property StoreId = new Property(0, long.class, "storeId", false, "STORE_ID");
        public final static Property PrinterType = new Property(1, String.class, "printerType", false, "PRINTER_TYPE");
        public final static Property PrinterIp = new Property(2, String.class, "printerIp", false, "PRINTER_IP");
        public final static Property PrinterName = new Property(3, String.class, "printerName", false, "PRINTER_NAME");
    }

    private Query<Printer> pOS_PrinterListQuery;
    private Query<Printer> shop_PrinterListQuery;

    public PrinterDao(DaoConfig config) {
        super(config);
    }
    
    public PrinterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRINTER\" (" + //
                "\"STORE_ID\" INTEGER NOT NULL ," + // 0: storeId
                "\"PRINTER_TYPE\" TEXT NOT NULL ," + // 1: printerType
                "\"PRINTER_IP\" TEXT UNIQUE ," + // 2: printerIp
                "\"PRINTER_NAME\" TEXT NOT NULL );"); // 3: printerName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRINTER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Printer entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getStoreId());
        stmt.bindString(2, entity.getPrinterType());
 
        String printerIp = entity.getPrinterIp();
        if (printerIp != null) {
            stmt.bindString(3, printerIp);
        }
        stmt.bindString(4, entity.getPrinterName());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Printer entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getStoreId());
        stmt.bindString(2, entity.getPrinterType());
 
        String printerIp = entity.getPrinterIp();
        if (printerIp != null) {
            stmt.bindString(3, printerIp);
        }
        stmt.bindString(4, entity.getPrinterName());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Printer readEntity(Cursor cursor, int offset) {
        Printer entity = new Printer( //
            cursor.getLong(offset + 0), // storeId
            cursor.getString(offset + 1), // printerType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // printerIp
            cursor.getString(offset + 3) // printerName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Printer entity, int offset) {
        entity.setStoreId(cursor.getLong(offset + 0));
        entity.setPrinterType(cursor.getString(offset + 1));
        entity.setPrinterIp(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPrinterName(cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Printer entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Printer entity) {
        return null;
    }

    @Override
    public boolean hasKey(Printer entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "printerList" to-many relationship of POS. */
    public List<Printer> _queryPOS_PrinterList(String printerIp) {
        synchronized (this) {
            if (pOS_PrinterListQuery == null) {
                QueryBuilder<Printer> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PrinterIp.eq(null));
                pOS_PrinterListQuery = queryBuilder.build();
            }
        }
        Query<Printer> query = pOS_PrinterListQuery.forCurrentThread();
        query.setParameter(0, printerIp);
        return query.list();
    }

    /** Internal query to resolve the "printerList" to-many relationship of Shop. */
    public List<Printer> _queryShop_PrinterList(long storeId) {
        synchronized (this) {
            if (shop_PrinterListQuery == null) {
                QueryBuilder<Printer> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.StoreId.eq(null));
                shop_PrinterListQuery = queryBuilder.build();
            }
        }
        Query<Printer> query = shop_PrinterListQuery.forCurrentThread();
        query.setParameter(0, storeId);
        return query.list();
    }

}
